{"version":3,"file":"node_modules_toruslabs_openlogin-ed25519_dist_openloginEd25519_esm_js.index.js","mappings":";;;;;;;;;;;;;;;;;AAQA,MAAMA,CAAC,GAAIC,yEAAX;AAEM,SAAUE,aAAV,CAAwBC,UAAxB,EAAmD;AAIvD,MAAIC,OAAJ;;AACA,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;IAClCC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwB,KAAxB,CAAV;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,GAAGD,UAAV;AACD,GATsD;;;AAYvD,QAAMI,CAAC,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAV;EACA,MAAMC,CAAC,GAAG,CAACV,CAAC,CAACW,EAAF,EAAD,EAASX,CAAC,CAACW,EAAF,EAAT,EAAiBX,CAAC,CAACW,EAAF,EAAjB,EAAyBX,CAAC,CAACW,EAAF,EAAzB,CAAV;EACA,MAAMC,EAAE,GAAG,IAAIH,UAAJ,CAAe,CAAC,GAAG,IAAIA,UAAJ,CAAeJ,OAAf,CAAJ,EAA6B,GAAG,IAAII,UAAJ,CAAe,EAAf,CAAhC,CAAf,CAAX;AACA,QAAMI,EAAE,GAAG,IAAIJ,UAAJ,CAAe,EAAf,CAAX;AACAT,EAAAA,CAAC,CAACc,WAAF,CAAcN,CAAd,EAAiBI,EAAjB,EAAqB,EAArB;AAEAJ,EAAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,GAAR;AAEAA,EAAAA,CAAC,CAAC,EAAD,CAAD,IAAS,GAAT;AAEAA,EAAAA,CAAC,CAAC,EAAD,CAAD,IAAS,EAAT;AACAR,EAAAA,CAAC,CAACe,UAAF,CAAaL,CAAb,EAAgBF,CAAhB;AACAR,EAAAA,CAAC,CAACgB,IAAF,CAAOH,EAAP,EAAWH,CAAX;;EACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgCL,EAAE,CAACK,CAAC,GAAG,EAAL,CAAF,GAAaJ,EAAE,CAACI,CAAD,CAAf;;EAEhC,OAAO;AAAEL,IAAAA,EAAE,EAAEN,MAAM,CAACC,IAAP,CAAYK,EAAZ,CAAN;AAAuBC,IAAAA,EAAE,EAAEP,MAAM,CAACC,IAAP,CAAYM,EAAZ;GAAlC;AACD;;;;;;;;;;;;;ACtCD","sources":["webpack://annotation/./node_modules/@toruslabs/openlogin-ed25519/src/utils.ts","webpack://annotation/ignored|/Users/hongsunbeom/Desktop/XREAL/DApp/annotation/node_modules/@toruslabs/tweetnacl-js|crypto"],"sourcesContent":["import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n","/* (ignored) */"],"names":["l","nacl","lowlevel","getED25519Key","privateKey","privKey","Buffer","from","d","Uint8Array","p","gf","sk","pk","crypto_hash","scalarbase","pack","i"],"sourceRoot":""}