{"version":3,"file":"node_modules_web3auth_metamask-adapter_dist_metamaskAdapter_esm_js.index.js","mappings":"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","sources":["webpack://annotation/./node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","webpack://annotation/./node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n    this.sessionTime = adapterOptions.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["BaseEvmAdapter","BaseAdapter","authenticateUser","provider","chainConfig","chainId","WalletLoginError","notConnectedError","chainNamespace","status","ADAPTER_STATUS","CONNECTED","accounts","request","method","length","existingToken","getSavedToken","name","isExpired","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","params","verifySignedChallenge","sessionTime","saveToken","disconnect","disconnectionError","clearToken","MetamaskAdapter","constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","NOT_READY","metamaskProvider","_","Error","init","options","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","log","debug","autoConnect","rehydrated","connect","error","ERRORED","setAdapterSettings","checkConnectionRequirements","getChainConfig","CONNECTING","adapter","switchChain","once","reconnected","connectionError","cleanup","removeAllListeners","DISCONNECTED","getUserInfo","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}