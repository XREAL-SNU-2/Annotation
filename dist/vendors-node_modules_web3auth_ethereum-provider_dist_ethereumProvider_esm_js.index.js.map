{"version":3,"file":"vendors-node_modules_web3auth_ethereum-provider_dist_ethereumProvider_esm_js.index.js","mappings":"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CAA8BvF,MAAM,CAACkN,OAArC,CAAN;AACA,SAAOvF,eAAP;AACD;;;;;;;;;;;;;ACrCH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAA2B;AAChC;AACA,IAAI,KAAK,EAQN;AACH,GAAG;AACH,oBAAoB;AACpB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;;AAEA;AACA;AACA,OAAO,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ,oBAAoB;AACpB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClHY;;AAEb,cAAc,mBAAO,CAAC,2DAAW;;AAEjC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAoD;AACxE;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;;;;;;;;;;;;ACj9Ba;;AAEb,UAAU,mBAAO,CAAC,sCAAK;;AAEvB,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA,GAAG;;AAEH,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sCAAsC;AACxD,WAAW,wCAAwC;AACnD,GAAG;;AAEH,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,sBAAsB;AAC3C;AACA,oBAAoB,EAAE,WAAW,EAAE,QAAQ,EAAE;AAC7C,eAAe,EAAE,WAAW,EAAE,QAAQ,EAAE;AACxC;AACA;;AAEA;AACA;AACA,iDAAiD,IAAI,yCAAyC,IAAI,iDAAiD,KAAK,kDAAkD,KAAK,iCAAiC,IAAI,sBAAsB,EAAE,WAAW,IAAI;AAC3R,kCAAkC,OAAO,YAAY,OAAO,4BAA4B,OAAO,8BAA8B,OAAO,6BAA6B,OAAO,8BAA8B,OAAO,gBAAgB,OAAO;;AAEpO;;AAEA;AACA,iEAAiE,EAAE;AACnE;AACA,8BAA8B,IAAI,GAAG,EAAE,aAAa,IAAI,mBAAmB,IAAI,GAAG,EAAE,cAAc,IAAI,yEAAyE,EAAE,oBAAoB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,2EAA2E,EAAE,oBAAoB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,2EAA2E,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,yBAAyB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE;;AAEjjC;AACA;AACA,kDAAkD,EAAE,WAAW,6CAA6C,2DAA2D,EAAE,OAAO,gCAAgC,EAAE,WAAW,6CAA6C,sDAAsD,2BAA2B,EAAE,UAAU,yBAAyB,EAAE,OAAO,4BAA4B,EAAE,OAAO,iCAAiC,EAAE,WAAW,oDAAoD,oEAAoE;AACplB;AACA,gEAAgE,EAAE,WAAW,kCAAkC,EAAE,OAAO,yFAAyF,EAAE,kBAAkB,EAAE,WAAW,6CAA6C,sDAAsD,yBAAyB,EAAE,OAAO,+BAA+B,EAAE,WAAW,6CAA6C,2DAA2D,EAAE,OAAO,sDAAsD,EAAE,WAAW,sCAAsC,oBAAoB,EAAE,WAAW,iCAAiC,EAAE,OAAO,mCAAmC,EAAE,OAAO,uDAAuD,EAAE,WAAW,kCAAkC,EAAE,OAAO,0DAA0D,EAAE,kBAAkB,EAAE,WAAW,6CAA6C,sDAAsD,yBAAyB,EAAE,OAAO,8BAA8B,EAAE,WAAW,oDAAoD,oEAAoE;AACtuC;AACA,gEAAgE,EAAE,WAAW,aAAa,OAAO,yBAAyB,EAAE,OAAO,aAAa,OAAO,gFAAgF,EAAE,kBAAkB,EAAE,WAAW,aAAa,OAAO,oCAAoC,aAAa,OAAO,6CAA6C,aAAa,OAAO,gBAAgB,EAAE,OAAO,aAAa,OAAO,sBAAsB,EAAE,WAAW,aAAa,OAAO,oCAAoC,aAAa,OAAO,kDAAkD,EAAE,OAAO,aAAa,OAAO,6CAA6C,EAAE,WAAW,QAAQ,OAAO,kCAAkC,QAAQ,OAAO,gBAAgB,EAAE,WAAW,aAAa,OAAO,wBAAwB,EAAE,OAAO,aAAa,OAAO,0BAA0B,EAAE,OAAO,aAAa,OAAO,8CAA8C,EAAE,WAAW,aAAa,OAAO,yBAAyB,EAAE,OAAO,aAAa,OAAO,iDAAiD,EAAE,kBAAkB,EAAE,WAAW,aAAa,OAAO,oCAAoC,aAAa,OAAO,6CAA6C,aAAa,OAAO,gBAAgB,EAAE,OAAO,aAAa,OAAO,qBAAqB,EAAE,WAAW,aAAa,OAAO,2CAA2C,aAAa,OAAO,2DAA2D,aAAa,OAAO;AAC5+C,qBAAqB,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,GAAG;;AAExE;AACA,8BAA8B,EAAE,SAAS,gBAAgB,SAAS,iBAAiB,EAAE,0BAA0B,EAAE,uBAAuB,IAAI,kBAAkB,EAAE,0BAA0B,EAAE,uBAAuB,IAAI,SAAS;;AAEhO;AACA,yCAAyC;AACzC,wDAAwD;;AAExD;AACA,qBAAqB,MAAM,kCAAkC,KAAK,kDAAkD,KAAK;AACzH,sBAAsB,MAAM,kCAAkC,KAAK,kDAAkD,KAAK;;AAE1H;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,0DAA0D,aAAa;AACvE;AACA,6BAA6B,EAAE,EAAE,IAAI;AACrC,2BAA2B,KAAK;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;;AAExB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;AACA;;;;;;;;;;;;;ACpYa;;AAEb,gBAAgB,+GAAiD;;AAEjE,iIAAqE;AACrE,2IAA+E;AAC/E,iIAAqE;AACrE,yHAA6D;AAC7D,6HAAoE;AACpE,qGAA4C;;AAE5C,uBAAuB;AACvB;AACA;AACA;;;;;;;;;;;;ACda;;AAEb,aAAa,mBAAO,CAAC,sCAAK;AAC1B,cAAc,mBAAO,CAAC,2DAAW;;AAEjC,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1Ea;;AAEb,aAAa,mBAAO,CAAC,sCAAK;;AAE1B,gBAAgB,mBAAO,CAAC,+DAAa;AACrC,cAAc,mBAAO,CAAC,2DAAW;AACjC,iBAAiB,iFAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC/UA;AACA;AACA;AACA;AACA,MAAM,KAA6B;AACnC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA,8BAA8B,EAAE,eAAe,EAAE,oBAAoB,EAAE,kBAAkB,EAAE;AAC3F;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;;AAEA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;;AAEA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;;AAEA;;AAEA,CAAC","sources":["webpack://annotation/./node_modules/@ethereumjs/common/src/chains/index.ts","webpack://annotation/./node_modules/@ethereumjs/common/src/eips/index.ts","webpack://annotation/./node_modules/@ethereumjs/common/src/hardforks/index.ts","webpack://annotation/./node_modules/@ethereumjs/common/src/index.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/baseTransaction.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/eip1559Transaction.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/eip2930Transaction.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/index.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/legacyTransaction.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/transactionFactory.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/types.ts","webpack://annotation/./node_modules/@ethereumjs/tx/src/util.ts","webpack://annotation/./node_modules/@metamask/eth-sig-util/src/encryption.ts","webpack://annotation/./node_modules/@metamask/eth-sig-util/src/index.ts","webpack://annotation/./node_modules/@metamask/eth-sig-util/src/personal-sign.ts","webpack://annotation/./node_modules/@metamask/eth-sig-util/src/sign-typed-data.ts","webpack://annotation/./node_modules/@metamask/eth-sig-util/src/utils.ts","webpack://annotation/../src/account.ts","webpack://annotation/../src/bytes.ts","webpack://annotation/../src/constants.ts","webpack://annotation/../src/hash.ts","webpack://annotation/../src/index.ts","webpack://annotation/../src/object.ts","webpack://annotation/../src/secp256k1v3-adapter.ts","webpack://annotation/../../src/secp256k1v3-lib/der.ts","webpack://annotation/../../src/secp256k1v3-lib/index.ts","webpack://annotation/../src/signature.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/rpc/walletMidddleware.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/rpc/ethRpcMiddlewares.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/rpc/jrpcClient.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/injectedProviders/walletConnectUtils.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/injectedProviders/WalletConnectProvider.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/converter.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/utils.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://annotation/./node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://annotation/./node_modules/crc-32/crc32.js","webpack://annotation/./node_modules/jsonschema/lib/attribute.js","webpack://annotation/./node_modules/jsonschema/lib/helpers.js","webpack://annotation/./node_modules/jsonschema/lib/index.js","webpack://annotation/./node_modules/jsonschema/lib/scan.js","webpack://annotation/./node_modules/jsonschema/lib/validator.js","webpack://annotation/./node_modules/tweetnacl-util/nacl-util.js"],"sourcesContent":["import { Chain, chainsType } from './../types'\nimport mainnet from './mainnet.json'\nimport ropsten from './ropsten.json'\nimport rinkeby from './rinkeby.json'\nimport kovan from './kovan.json'\nimport goerli from './goerli.json'\nimport sepolia from './sepolia.json'\n\n/**\n * @hidden\n */\nexport function _getInitializedChains(customChains?: Chain[]) {\n  const names: any = {\n    '1': 'mainnet',\n    '3': 'ropsten',\n    '4': 'rinkeby',\n    '42': 'kovan',\n    '5': 'goerli',\n    '11155111': 'sepolia',\n  }\n  const chains: any = {\n    mainnet,\n    ropsten,\n    rinkeby,\n    kovan,\n    goerli,\n    sepolia,\n  }\n  if (customChains) {\n    for (const chain of customChains) {\n      const name = chain.name\n      names[chain.chainId.toString()] = name\n      chains[name] = chain\n    }\n  }\n\n  chains['names'] = names\n  return chains\n}\n\n/**\n * @deprecated this constant will be internalized (removed)\n * on next major version update\n */\nexport const chains: chainsType = _getInitializedChains()\n","import { eipsType } from './../types'\n\nexport const EIPs: eipsType = {\n  1153: require('./1153.json'),\n  1559: require('./1559.json'),\n  2315: require('./2315.json'),\n  2537: require('./2537.json'),\n  2565: require('./2565.json'),\n  2718: require('./2718.json'),\n  2929: require('./2929.json'),\n  2930: require('./2930.json'),\n  3198: require('./3198.json'),\n  3529: require('./3529.json'),\n  3540: require('./3540.json'),\n  3541: require('./3541.json'),\n  3554: require('./3554.json'),\n  3607: require('./3607.json'),\n  3651: require('./3651.json'),\n  3670: require('./3670.json'),\n  3675: require('./3675.json'),\n  3855: require('./3855.json'),\n  3860: require('./3860.json'),\n  4345: require('./4345.json'),\n  4399: require('./4399.json'),\n  5133: require('./5133.json'),\n}\n","export const hardforks = [\n  ['chainstart', require('./chainstart.json')],\n  ['homestead', require('./homestead.json')],\n  ['dao', require('./dao.json')],\n  ['tangerineWhistle', require('./tangerineWhistle.json')],\n  ['spuriousDragon', require('./spuriousDragon.json')],\n  ['byzantium', require('./byzantium.json')],\n  ['constantinople', require('./constantinople.json')],\n  ['petersburg', require('./petersburg.json')],\n  ['istanbul', require('./istanbul.json')],\n  ['muirGlacier', require('./muirGlacier.json')],\n  ['berlin', require('./berlin.json')],\n  ['london', require('./london.json')],\n  ['shanghai', require('./shanghai.json')],\n  ['arrowGlacier', require('./arrowGlacier.json')],\n  ['grayGlacier', require('./grayGlacier.json')],\n  ['mergeForkIdTransition', require('./mergeForkIdTransition.json')],\n  ['merge', require('./merge.json')],\n]\n","import { EventEmitter } from 'events'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { BN, BNLike, toType, TypeOutput, intToBuffer } from 'ethereumjs-util'\nimport { _getInitializedChains } from './chains'\nimport { hardforks as HARDFORK_CHANGES } from './hardforks'\nimport { EIPs } from './eips'\nimport {\n  BootstrapNode,\n  Chain as IChain,\n  GenesisBlock,\n  GenesisState,\n  Hardfork as HardforkParams,\n} from './types'\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n\nexport enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Goerli = 5,\n  Sepolia = 11155111,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  GrayGlacier = 'grayGlacier',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Merge = 'merge',\n  Shanghai = 'shanghai',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.Istanbul\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Limit parameter returns to the given hardforks\n   */\n  supportedHardforks?: Array<string | Hardfork>\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 2537, ]`)\n   *\n   * Currently supported:\n   *\n   * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\n   */\n  eips?: number[]\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | BN | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains\n   *\n   * Usage (directly with the respective chain intialization via the {@link CommonOpts.chain} option):\n   *\n   * Pattern 1 (without genesis state):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   *\n   * Pattern 2 (with genesis state see {@link GenesisState} for format):\n   *\n   * ```javascript\n   * const simpleState = {\n   *   '0x0...01': '0x100', // For EoA\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * import chain1GenesisState from '[PATH_TO_GENESIS_STATES]/chain1GenesisState.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, simpleState ] ]})\n   * ```\n   *\n   * Pattern 3 (with complex genesis state, containing contract accounts and storage).\n   * Note that in {@link AccountState} there are two\n   * accepted types. This allows to easily insert accounts in the genesis state:\n   *\n   * A complex genesis state with Contract and EoA states would have the following format:\n   *\n   * ```javascript\n   * const complexState = {\n   *   '0x0...01': '0x100', // For EoA\n   *   '0x0...02': ['0x1', '0xRUNTIME_BYTECODE', [[ keyOne, valueOne ], [ keyTwo, valueTwo ]]] // For contracts\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, complexState ] ]})\n   * ```\n   */\n  customChains?: IChain[] | [IChain, GenesisState][]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | BN\n}\n\ninterface hardforkOptions {\n  /** optional, only allow supported HFs (default: false) */\n  onlySupported?: boolean\n  /** optional, only active HFs (default: false) */\n  onlyActive?: boolean\n}\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport default class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: IChain\n  private _hardfork: string | Hardfork\n  private _supportedHardforks: Array<string | Hardfork> = []\n  private _eips: number[] = []\n  private _customChains: IChain[] | [IChain, GenesisState][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<IChain> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMainnet,\n            chainId: 137,\n            networkId: 137,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMumbai,\n            chainId: 80001,\n            networkId: 80001,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumRinkebyTestnet,\n            chainId: 421611,\n            networkId: 421611,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom(\n          {\n            name: CustomChain.xDaiChain,\n            chainId: 100,\n            networkId: 100,\n          },\n          opts\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticKovan,\n            chainId: 69,\n            networkId: 69,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticEthereum,\n            chainId: 10,\n            networkId: 10,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  static forCustomChain(\n    baseChain: string | number | Chain,\n    customChainParams: Partial<IChain>,\n    hardfork?: string | Hardfork,\n    supportedHardforks?: Array<string | Hardfork>\n  ): Common {\n    const standardChainParams = Common._getChainParams(baseChain)\n\n    return new Common({\n      chain: {\n        ...standardChainParams,\n        ...customChainParams,\n      },\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks,\n    })\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: BN): boolean {\n    const initializedChains: any = _getInitializedChains()\n    return Boolean(initializedChains['names'][chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | BN,\n    customChains?: IChain[]\n  ): IChain {\n    const initializedChains: any = _getInitializedChains(customChains)\n    if (typeof chain === 'number' || BN.isBN(chain)) {\n      chain = chain.toString()\n\n      if (initializedChains['names'][chain]) {\n        const name: string = initializedChains['names'][chain]\n        return initializedChains[name]\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain]\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  /**\n   *\n   * @constructor\n   */\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Istanbul\n    for (const hf of this._chainParams.hardforks) {\n      if (!hf.forkHash) {\n        hf.forkHash = this._calcForkHash(hf.name)\n      }\n    }\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.supportedHardforks) {\n      this._supportedHardforks = opts.supportedHardforks\n    }\n    if (opts.hardfork) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | BN | object): any {\n    if (typeof chain === 'number' || typeof chain === 'string' || BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      let plainCustomChains: IChain[]\n      if (\n        this._customChains &&\n        this._customChains.length > 0 &&\n        Array.isArray(this._customChains[0])\n      ) {\n        plainCustomChains = (this._customChains as [IChain, GenesisState][]).map((e) => e[0])\n      } else {\n        plainCustomChains = this._customChains as IChain[]\n      }\n      this._chainParams = Common._getChainParams(chain, plainCustomChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or BN when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if ((<any>chain)[param] === undefined) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as IChain\n    } else {\n      throw new Error('Wrong input format')\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    let existing = false\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    td = toType(td, TypeOutput.BN)\n\n    let hardfork = Hardfork.Chainstart\n    let minTdHF\n    let maxTdHF\n    let previousHF\n    for (const hf of this.hardforks()) {\n      // Skip comparison for not applied HFs\n      if (hf.block === null) {\n        if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n          if (td.gte(new BN(hf.td))) {\n            return hf.name\n          }\n        }\n        continue\n      }\n      if (blockNumber.gte(new BN(hf.block))) {\n        hardfork = hf.name as Hardfork\n      }\n      if (td && hf.td) {\n        if (td.gte(new BN(hf.td))) {\n          minTdHF = hf.name\n        } else {\n          maxTdHF = previousHF\n        }\n      }\n      previousHF = hf.name\n    }\n    if (td) {\n      let msgAdd = `block number: ${blockNumber} (-> ${hardfork}), `\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          const msg = 'HF determined by block number is lower than the minimum total difficulty HF'\n          msgAdd += `total difficulty: ${td} (-> ${minTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          const msg = 'Maximum HF determined by total difficulty is lower than the block number HF'\n          msgAdd += `total difficulty: ${td} (-> ${maxTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n    }\n    return hardfork\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  _chooseHardfork(hardfork?: string | Hardfork | null, onlySupported: boolean = true): string {\n    if (!hardfork) {\n      hardfork = this._hardfork\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  _getHardfork(hardfork: string | Hardfork): any {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    throw new Error(`Hardfork ${hardfork} not defined for chain ${this.chainName()}`)\n  }\n\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  _isSupportedHardfork(hardfork: string | Hardfork | null): boolean {\n    if (this._supportedHardforks.length > 0) {\n      for (const supportedHf of this._supportedHardforks) {\n        if (hardfork === supportedHf) return true\n      }\n    } else {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs) {\n        ;(EIPs[eip].requiredEIPs as number[]).forEach((elem) => {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        })\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n  param(topic: string, name: string): any {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value = null\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== null) {\n        return value\n      }\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): any {\n    hardfork = this._chooseHardfork(hardfork)\n\n    let value = null\n    for (const hfChanges of HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = valueEIP !== null ? valueEIP : value\n        }\n        // Paramater-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (!hfChanges[1][topic]) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): any {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return null\n    }\n    const value = eipParams[topic][name].v\n    return value\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  paramByBlock(topic: string, name: string, blockNumber: BNLike): any {\n    const activeHfs = this.activeHardforks(blockNumber)\n    const hardfork = activeHfs[activeHfs.length - 1]['name']\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if (hf['eips'].includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(\n    hardfork: string | Hardfork | null,\n    blockNumber: BNLike,\n    opts: hardforkOptions = {}\n  ): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BNLike, opts?: hardforkOptions): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(\n    hardfork1: string | Hardfork | null,\n    hardfork2: string | Hardfork,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported)\n\n    let hardforks\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts)\n    } else {\n      hardforks = this.hardforks()\n    }\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork, opts?: hardforkOptions): boolean {\n    return this.hardforkGteHardfork(null, hardfork, opts)\n  }\n\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  hardforkIsActiveOnChain(\n    hardfork?: string | Hardfork | null,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    for (const hf of this.hardforks()) {\n      if (hf['name'] === hardfork && hf['block'] !== null) return true\n    }\n    return false\n  }\n\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  activeHardforks(blockNumber?: BNLike | null, opts: hardforkOptions = {}): HardforkParams[] {\n    const activeHardforks: HardforkParams[] = []\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['block'] === null) continue\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue\n\n      activeHardforks.push(hf)\n    }\n    return activeHardforks\n  }\n\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  activeHardfork(blockNumber?: BNLike | null, opts: hardforkOptions = {}): string {\n    const activeHardforks = this.activeHardforks(blockNumber, opts)\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name']\n    } else {\n      throw new Error(`No (supported) active hardfork found`)\n    }\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n  hardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.hardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this._getHardfork(hardfork)['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return new BN(block)\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTD(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const td = this._getHardfork(hardfork)['td']\n    if (td === undefined || td === null) {\n      return null\n    }\n    return new BN(td)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this.hardforkBlockBN(hardfork)\n    return block ? block.eq(blockNumber) : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.nextHardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n  nextHardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: BN | null, hf: HardforkParams) => {\n      const block = new BN(hf.block!)\n      return block.gt(hfBlock) && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isNextHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const nextHardforkBlock = this.nextHardforkBlockBN(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber)\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork) {\n    const genesis = Buffer.from(this.genesis().hash.substr(2), 'hex')\n\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlock = 0\n    for (const hf of this.hardforks()) {\n      const block = hf.block\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same block number HFs\n      if (block !== 0 && block !== null && block !== prevBlock) {\n        const hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n      }\n\n      if (hf.name === hardfork) break\n      if (block !== null) {\n        prevBlock = block\n      }\n    }\n    const inputBuffer = Buffer.concat([genesis, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n  forkHash(hardfork?: string | Hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const data = this._getHardfork(hardfork)\n    if (data['block'] === null && data['td'] === undefined) {\n      const msg = 'No fork hash calculation possible for future hardfork'\n      throw new Error(msg)\n    }\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash']\n    }\n    return this._calcForkHash(hardfork)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): any | null {\n    const resArray = this.hardforks().filter((hf: any) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlock {\n    return this._chainParams['genesis']\n  }\n\n  /**\n   * Returns the Genesis state of the current chain,\n   * all values are provided as hex-prefixed strings.\n   */\n  genesisState(): GenesisState {\n    // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json')\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json')\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json')\n      case 'kovan':\n        return require('./genesisStates/kovan.json')\n      case 'goerli':\n        return require('./genesisStates/goerli.json')\n      case 'sepolia':\n        return require('./genesisStates/sepolia.json')\n    }\n\n    // Custom chains with genesis state provided\n    if (\n      this._customChains &&\n      this._customChains.length > 0 &&\n      Array.isArray(this._customChains[0])\n    ) {\n      for (const chainArrayWithGenesis of this._customChains as [IChain, GenesisState][]) {\n        if (chainArrayWithGenesis[0].name === this.chainName()) {\n          return chainArrayWithGenesis[1]\n        }\n      }\n    }\n\n    return {}\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkParams[] {\n    return this._chainParams['hardforks']\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNode[] {\n    return this._chainParams['bootstrapNodes']\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams['dnsNetworks']!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n  chainId(): number {\n    return toType(this.chainIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainIdBN(): BN {\n    return new BN(this._chainParams['chainId'])\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams['name']\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n  networkId(): number {\n    return toType(this.networkIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkIdBN(): BN {\n    return new BN(this._chainParams['networkId'])\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['algorithm'] as ConsensusAlgorithm\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusConfig(): { [key: string]: any } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    const consensusAlgorithm = this.consensusAlgorithm()\n    return this._chainParams['consensus']![consensusAlgorithm as ConsensusAlgorithm]\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n    copy.removeAllListeners()\n    return copy\n  }\n}\n","import Common, { Chain, Hardfork } from '@ethereumjs/common'\nimport {\n  Address,\n  BN,\n  toBuffer,\n  MAX_INTEGER,\n  MAX_UINT64,\n  unpadBuffer,\n  ecsign,\n  publicToAddress,\n  BNLike,\n  bufferToHex,\n} from 'ethereumjs-util'\nimport {\n  TxData,\n  JsonTx,\n  AccessListEIP2930ValuesArray,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559ValuesArray,\n  FeeMarketEIP1559TxData,\n  TxValuesArray,\n  Capability,\n  TxOptions,\n} from './types'\n\ninterface TransactionCache {\n  hash: Buffer | undefined\n  dataFee?: {\n    value: BN\n    hardfork: string | Hardfork\n  }\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n  private readonly _type: number\n\n  public readonly nonce: BN\n  public readonly gasLimit: BN\n  public readonly to?: Address\n  public readonly value: BN\n  public readonly data: Buffer\n\n  public readonly v?: BN\n  public readonly r?: BN\n  public readonly s?: BN\n\n  public readonly common!: Common\n\n  protected cache: TransactionCache = {\n    hash: undefined,\n    dataFee: undefined,\n  }\n\n  protected readonly txOptions: TxOptions\n\n  /**\n   * List of tx type defining EIPs,\n   * e.g. 1559 (fee market) and 2930 (access lists)\n   * for FeeMarketEIP1559Transaction objects\n   */\n  protected activeCapabilities: number[] = []\n\n  /**\n   * The default chain the tx falls back to if no Common\n   * is provided and if the chain can't be derived from\n   * a passed in chainId (only EIP-2718 typed txs) or\n   * EIP-155 signature (legacy txs).\n   *\n   * @hidden\n   */\n  protected DEFAULT_CHAIN = Chain.Mainnet\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Istanbul\n\n  constructor(txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData, opts: TxOptions) {\n    const { nonce, gasLimit, to, value, data, v, r, s, type } = txData\n    this._type = new BN(toBuffer(type)).toNumber()\n\n    this.txOptions = opts\n\n    const toB = toBuffer(to === '' ? '0x' : to)\n    const vB = toBuffer(v === '' ? '0x' : v)\n    const rB = toBuffer(r === '' ? '0x' : r)\n    const sB = toBuffer(s === '' ? '0x' : s)\n\n    this.nonce = new BN(toBuffer(nonce === '' ? '0x' : nonce))\n    this.gasLimit = new BN(toBuffer(gasLimit === '' ? '0x' : gasLimit))\n    this.to = toB.length > 0 ? new Address(toB) : undefined\n    this.value = new BN(toBuffer(value === '' ? '0x' : value))\n    this.data = toBuffer(data === '' ? '0x' : data)\n\n    this.v = vB.length > 0 ? new BN(vB) : undefined\n    this.r = rB.length > 0 ? new BN(rB) : undefined\n    this.s = sB.length > 0 ? new BN(sB) : undefined\n\n    this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s })\n\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64)\n\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true)\n  }\n\n  /**\n   * Alias for {@link BaseTransaction.type}\n   *\n   * @deprecated Use `type` instead\n   */\n  get transactionType(): number {\n    return this.type\n  }\n\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability: Capability) {\n    return this.activeCapabilities.includes(capability)\n  }\n\n  /**\n   * Checks if the transaction has the minimum amount of gas required\n   * (DataFee + TxFee + Creation Fee).\n   */\n  validate(): boolean\n  validate(stringError: false): boolean\n  validate(stringError: true): string[]\n  validate(stringError: boolean = false): boolean | string[] {\n    const errors = []\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`)\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature')\n    }\n\n    return stringError ? errors : errors.length === 0\n  }\n\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee(): BN {\n    const fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'))\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'))\n    }\n    return fee\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero')\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero')\n\n    let cost: number | BN = 0\n    for (let i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero)\n    }\n\n    cost = new BN(cost)\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = Math.ceil(this.data.length / 32)\n      const initCodeCost = new BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(\n        dataLength\n      )\n      cost.iadd(initCodeCost)\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  abstract getUpfrontCost(): BN\n\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress(): boolean {\n    return this.to === undefined || this.to.buf.length === 0\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   *\n   * Use {@link BaseTransaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n   */\n  abstract raw(): TxValuesArray | AccessListEIP2930ValuesArray | FeeMarketEIP1559ValuesArray\n\n  /**\n   * Returns the encoding of the transaction.\n   */\n  abstract serialize(): Buffer\n\n  // Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n  //\n  // Note: do not use code docs here since VS Studio is then not able to detect the\n  // comments from the inherited methods\n  abstract getMessageToSign(hashMessage: false): Buffer | Buffer[]\n  abstract getMessageToSign(hashMessage?: true): Buffer\n\n  abstract hash(): Buffer\n\n  abstract getMessageToVerifySignature(): Buffer\n\n  public isSigned(): boolean {\n    const { v, r, s } = this\n    if (this.type === 0) {\n      if (!v || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    } else {\n      if (v === undefined || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    }\n  }\n\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature(): boolean {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey()\n      return unpadBuffer(publicKey).length !== 0\n    } catch (e: any) {\n      return false\n    }\n  }\n\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress(): Address {\n    return new Address(publicToAddress(this.getSenderPublicKey()))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  abstract getSenderPublicKey(): Buffer\n\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey: Buffer): TransactionObject {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.')\n      throw new Error(msg)\n    }\n\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false\n    if (\n      this.type === 0 &&\n      this.common.gteHardfork('spuriousDragon') &&\n      !this.supports(Capability.EIP155ReplayProtection)\n    ) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      hackApplied = true\n    }\n\n    const msgHash = this.getMessageToSign(true)\n    const { v, r, s } = ecsign(msgHash, privateKey)\n    const tx = this._processSignature(v, r, s)\n\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection)\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1)\n      }\n    }\n\n    return tx\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  abstract toJSON(): JsonTx\n\n  // Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n  protected abstract _processSignature(v: number, r: Buffer, s: Buffer): TransactionObject\n\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  protected _getCommon(common?: Common, chainId?: BNLike) {\n    // Chain ID provided\n    if (chainId) {\n      const chainIdBN = new BN(toBuffer(chainId))\n      if (common) {\n        if (!common.chainIdBN().eq(chainIdBN)) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common')\n          throw new Error(msg)\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy()\n      } else {\n        if (Common.isSupportedChainId(chainIdBN)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new Common({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK })\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return Common.forCustomChain(\n            this.DEFAULT_CHAIN,\n            {\n              name: 'custom-chain',\n              networkId: chainIdBN,\n              chainId: chainIdBN,\n            },\n            this.DEFAULT_HARDFORK\n          )\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (\n        common?.copy() ?? new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n      )\n    }\n  }\n\n  /**\n   * Validates that an object with BN values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BN values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  protected _validateCannotExceedMaxInteger(\n    values: { [key: string]: BN | undefined },\n    bits = 256,\n    cannotEqual = false\n  ) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value?.gte(MAX_UINT64)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_UINT64)) {\n              const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`)\n              throw new Error(msg)\n            }\n          }\n          break\n        case 256:\n          if (cannotEqual) {\n            if (value?.gte(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          }\n          break\n        default: {\n          const msg = this._errorMsg('unimplemented bits value')\n          throw new Error(msg)\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public abstract errorStr(): string\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected abstract _errorMsg(msg: string): string\n\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  protected _getSharedErrorPostfix() {\n    let hash = ''\n    try {\n      hash = this.isSigned() ? bufferToHex(this.hash()) : 'not available (unsigned)'\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let isSigned = ''\n    try {\n      isSigned = this.isSigned().toString()\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let hf = ''\n    try {\n      hf = this.common.hardfork()\n    } catch (e: any) {\n      hf = 'error'\n    }\n\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `\n    postfix += `signed=${isSigned} hf=${hf}`\n\n    return postfix\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  N_DIV_2,\n  TxOptions,\n} from './types'\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 2\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nexport default class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly maxPriorityFeePerGas: BN\n  public readonly maxFeePerGas: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'london'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  public static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error(\n        'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).'\n      )\n    }\n\n    const [\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList,\n      v,\n      r,\n      s,\n    ] = values\n\n    validateNoLeadingZeroes({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s })\n\n    return new FeeMarketEIP1559Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? [],\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.maxFeePerGas = new BN(toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas))\n    this.maxPriorityFeePerGas = new BN(\n      toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas)\n    )\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n    })\n\n    if (this.gasLimit.mul(this.maxFeePerGas).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n\n    if (this.maxFeePerGas.lt(this.maxPriorityFeePerGas)) {\n      const msg = this._errorMsg(\n        'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee: BN = new BN(0)): BN {\n    const inclusionFeePerGas = BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee))\n    const gasPrice = inclusionFeePerGas.add(baseFee)\n    return this.gasLimit.mul(gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw(): FeeMarketEIP1559ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.maxPriorityFeePerGas),\n      bnToUnpaddedBuffer(this.maxFeePerGas),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 9)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return FeeMarketEIP1559Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      maxPriorityFeePerGas: bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bnToHex(this.maxFeePerGas),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  AccessListEIP2930TxData,\n  AccessListEIP2930ValuesArray,\n  JsonTx,\n  TxOptions,\n  N_DIV_2,\n} from './types'\n\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 1\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nexport default class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'berlin'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    return new AccessListEIP2930Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  public static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error(\n        'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).'\n      )\n    }\n\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    const emptyAccessList: AccessList = []\n\n    return new AccessListEIP2930Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? emptyAccessList,\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, gasPrice } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.gasPrice = new BN(toBuffer(gasPrice === '' ? '0x' : gasPrice))\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice,\n    })\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER')\n      throw new Error(msg)\n    }\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw(): AccessListEIP2930ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 8)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { yParity, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        yParity!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return AccessListEIP2930Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","export { default as Transaction } from './legacyTransaction'\nexport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nexport { default as TransactionFactory } from './transactionFactory'\nexport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\nexport * from './types'\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  MAX_INTEGER,\n  rlp,\n  rlphash,\n  toBuffer,\n  unpadBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport { TxOptions, TxData, JsonTx, N_DIV_2, TxValuesArray, Capability } from './types'\nimport { BaseTransaction } from './baseTransaction'\nimport Common from '@ethereumjs/common'\nimport { checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 0\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nexport default class Transaction extends BaseTransaction<Transaction> {\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: TxData, opts: TxOptions = {}) {\n    return new Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    const values = rlp.decode(serialized)\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array')\n    }\n\n    return this.fromValuesArray(values, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  public static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error(\n        'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).'\n      )\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    return new Transaction(\n      {\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        v,\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n\n    this.common = this._validateTxV(this.v, opts.common)\n\n    this.gasPrice = new BN(toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice))\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n    this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice })\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        const v = this.v!\n        const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n        }\n      }\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw(): TxValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize(): Buffer {\n    return rlp.encode(this.raw())\n  }\n\n  private _getMessageToSign() {\n    const values = [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n    ]\n\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(toBuffer(this.common.chainIdBN()))\n      values.push(unpadBuffer(toBuffer(0)))\n      values.push(unpadBuffer(toBuffer(0)))\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: the raw message message format for the legacy tx is not RLP encoded\n   * and you might need to do yourself with:\n   *\n   * ```javascript\n   * import { rlp } from 'ethereumjs-util'\n   * const message = tx.getMessageToSign(false)\n   * const serializedMessage = rlp.encode(message) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage: false): Buffer[]\n  getMessageToSign(hashMessage?: true): Buffer\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign()\n    if (hashMessage) {\n      return rlphash(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return super.getDataFee()\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash(): Buffer {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = rlphash(this.raw())\n      }\n      return this.cache.hash\n    }\n\n    return rlphash(this.raw())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const message = this._getMessageToSign()\n    return rlphash(message)\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey(): Buffer {\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!,\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!),\n        this.supports(Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  protected _processSignature(v: number, r: Buffer, s: Buffer) {\n    const vBN = new BN(v)\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8))\n    }\n\n    const opts = { ...this.txOptions, common: this.common }\n\n    return Transaction.fromTxData(\n      {\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v: vBN,\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON(): JsonTx {\n    return {\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Validates tx's `v` value\n   */\n  private _validateTxV(v?: BN, common?: Common): Common {\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n        throw new Error(\n          `Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`\n        )\n      }\n    }\n\n    let chainIdBN\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (\n      v !== undefined &&\n      (!common || common.gteHardfork('spuriousDragon')) &&\n      !v.eqn(27) &&\n      !v.eqn(28)\n    ) {\n      if (common) {\n        const chainIdDoubled = common.chainIdBN().muln(2)\n        const isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n        if (!isValidEIP155V) {\n          throw new Error(\n            `Incompatible EIP155-based V ${v} and chain id ${common.chainIdBN()}. See the Common parameter of the Transaction constructor to set the chain id.`\n          )\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub\n        if (v.subn(35).isEven()) {\n          numSub = 35\n        } else {\n          numSub = 36\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2)\n      }\n    }\n    return this._getCommon(common, chainIdBN)\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _unsignedTxImplementsEIP155() {\n    return this.common.gteHardfork('spuriousDragon')\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _signedTxImplementsEIP155() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon')\n\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    const v = this.v!\n\n    const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n    const vAndChainIdMeetEIP155Conditions =\n      v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` gasPrice=${this.gasPrice}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { BN, toBuffer } from 'ethereumjs-util'\nimport {\n  TxOptions,\n  TypedTransaction,\n  TxData,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559TxData,\n} from './types'\nimport { Transaction, AccessListEIP2930Transaction, FeeMarketEIP1559Transaction } from '.'\nimport Common from '@ethereumjs/common'\n\nexport default class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  private constructor() {}\n\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  public static fromTxData(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ): TypedTransaction {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(<TxData>txData, txOptions)\n    } else {\n      const txType = new BN(toBuffer(txData.type)).toNumber()\n      if (txType === 0) {\n        return Transaction.fromTxData(<TxData>txData, txOptions)\n      } else if (txType === 1) {\n        return AccessListEIP2930Transaction.fromTxData(<AccessListEIP2930TxData>txData, txOptions)\n      } else if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(<FeeMarketEIP1559TxData>txData, txOptions)\n      } else {\n        throw new Error(`Tx instantiation with type ${txType} not supported`)\n      }\n    }\n  }\n\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  public static fromSerializedData(data: Buffer, txOptions: TxOptions = {}): TypedTransaction {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      let EIP: number\n      switch (data[0]) {\n        case 1:\n          EIP = 2930\n          break\n        case 2:\n          EIP = 1559\n          break\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`)\n      }\n      if (EIP === 1559) {\n        return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions)\n      } else {\n        // EIP === 2930\n        return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions)\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions)\n    }\n  }\n\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  public static fromBlockBodyData(data: Buffer | Buffer[], txOptions: TxOptions = {}) {\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions)\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions)\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input')\n    }\n  }\n\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n  public static getTransactionClass(transactionID: number = 0, _common?: Common) {\n    const legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff)\n\n    if (legacyTxn) {\n      return Transaction\n    }\n\n    switch (transactionID) {\n      case 1:\n        return AccessListEIP2930Transaction\n      case 2:\n        return FeeMarketEIP1559Transaction\n      default:\n        throw new Error(`TypedTransaction with ID ${transactionID} unknown`)\n    }\n  }\n}\n","import { BN, AddressLike, BNLike, BufferLike, PrefixedHexString } from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { default as Transaction } from './legacyTransaction'\nimport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nimport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\n\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nexport enum Capability {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  EIP155ReplayProtection = 155,\n\n  /**\n   * Tx supports EIP-1559 gas fee market mechansim\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n  EIP1559FeeMarket = 1559,\n\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n  EIP2718TypedTransaction = 2718,\n\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n  EIP2930AccessLists = 2930,\n}\n\n/**\n * The options for initializing a {@link Transaction}.\n */\nexport interface TxOptions {\n  /**\n   * A {@link Common} object defining the chain and hardfork for the transaction.\n   *\n   * Object will be internally copied so that tx behavior don't incidentally\n   * change on future HF changes.\n   *\n   * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\n   *\n   * Current default hardfork: `istanbul`\n   */\n  common?: Common\n  /**\n   * A transaction object by default gets frozen along initialization. This gives you\n   * strong additional security guarantees on the consistency of the tx parameters.\n   * It also enables tx hash caching when the `hash()` method is called multiple times.\n   *\n   * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\n   * add additional properties - it is strongly encouraged that you do the freeze yourself\n   * within your code instead.\n   *\n   * Default: true\n   */\n  freeze?: boolean\n}\n\n/*\n * Access List types\n */\n\nexport type AccessListItem = {\n  address: PrefixedHexString\n  storageKeys: PrefixedHexString[]\n}\n\n/*\n * An Access List as a tuple of [address: Buffer, storageKeys: Buffer[]]\n */\nexport type AccessListBufferItem = [Buffer, Buffer[]]\nexport type AccessListBuffer = AccessListBufferItem[]\nexport type AccessList = AccessListItem[]\n\nexport function isAccessListBuffer(\n  input: AccessListBuffer | AccessList\n): input is AccessListBuffer {\n  if (input.length === 0) {\n    return true\n  }\n  const firstItem = input[0]\n  if (Array.isArray(firstItem)) {\n    return true\n  }\n  return false\n}\n\nexport function isAccessList(input: AccessListBuffer | AccessList): input is AccessList {\n  return !isAccessListBuffer(input) // This is exactly the same method, except the output is negated.\n}\n\n/**\n * Encompassing type for all transaction types.\n *\n * Note that this also includes legacy txs which are\n * referenced as {@link Transaction} for compatibility reasons.\n */\nexport type TypedTransaction =\n  | Transaction\n  | AccessListEIP2930Transaction\n  | FeeMarketEIP1559Transaction\n\n/**\n * Legacy {@link Transaction} Data\n */\nexport type TxData = {\n  /**\n   * The transaction's nonce.\n   */\n  nonce?: BNLike\n\n  /**\n   * The transaction's gas price.\n   */\n  gasPrice?: BNLike\n\n  /**\n   * The transaction's gas limit.\n   */\n  gasLimit?: BNLike\n\n  /**\n   * The transaction's the address is sent to.\n   */\n  to?: AddressLike\n\n  /**\n   * The amount of Ether sent.\n   */\n  value?: BNLike\n\n  /**\n   * This will contain the data of the message or the init of a contract.\n   */\n  data?: BufferLike\n\n  /**\n   * EC recovery ID.\n   */\n  v?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  r?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  s?: BNLike\n\n  /**\n   * The transaction type\n   */\n\n  type?: BNLike\n}\n\n/**\n * {@link AccessListEIP2930Transaction} data.\n */\nexport interface AccessListEIP2930TxData extends TxData {\n  /**\n   * The transaction's chain ID\n   */\n  chainId?: BNLike\n\n  /**\n   * The access list which contains the addresses/storage slots which the transaction wishes to access\n   */\n  accessList?: AccessListBuffer | AccessList\n}\n\n/**\n * {@link FeeMarketEIP1559Transaction} data.\n */\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  /**\n   * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\n   * transactions and should always be undefined for this specific transaction type.\n   */\n  gasPrice?: never\n  /**\n   * The maximum inclusion fee per gas (this fee is given to the miner)\n   */\n  maxPriorityFeePerGas?: BNLike\n  /**\n   * The maximum total fee\n   */\n  maxFeePerGas?: BNLike\n}\n\n/**\n * Buffer values array for a legacy {@link Transaction}\n */\nexport type TxValuesArray = Buffer[]\n\n/**\n * Buffer values array for an {@link AccessListEIP2930Transaction}\n */\nexport type AccessListEIP2930ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\n/**\n * Buffer values array for a {@link FeeMarketEIP1559Transaction}\n */\nexport type FeeMarketEIP1559ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\ntype JsonAccessListItem = { address: string; storageKeys: string[] }\n\n/**\n * Generic interface for all tx types with a\n * JSON representation of a transaction.\n *\n * Note that all values are marked as optional\n * and not all the values are present on all tx types\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\n */\nexport interface JsonTx {\n  nonce?: string\n  gasPrice?: string\n  gasLimit?: string\n  to?: string\n  data?: string\n  v?: string\n  r?: string\n  s?: string\n  value?: string\n  chainId?: string\n  accessList?: JsonAccessListItem[]\n  type?: string\n  maxPriorityFeePerGas?: string\n  maxFeePerGas?: string\n}\n\n/**\n * A const defining secp256k1n/2\n */\nexport const N_DIV_2 = new BN(\n  '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n  16\n)\n","import Common from '@ethereumjs/common'\nimport { bufferToHex, setLengthLeft, toBuffer } from 'ethereumjs-util'\nimport { AccessList, AccessListBuffer, AccessListItem, isAccessList } from './types'\n\nexport function checkMaxInitCodeSize(common: Common, length: number) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\n      `the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n        'vm',\n        'maxInitCodeSize'\n      )}`\n    )\n  }\n}\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (accessList && isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost\n  }\n}\n","import * as nacl from 'tweetnacl';\nimport * as naclUtil from 'tweetnacl-util';\n\nimport { isNullish } from './utils';\n\nexport interface EthEncryptedData {\n  version: string;\n  nonce: string;\n  ephemPublicKey: string;\n  ciphertext: string;\n}\n\n/**\n * Encrypt a message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nexport function encrypt({\n  publicKey,\n  data,\n  version,\n}: {\n  publicKey: string;\n  data: unknown;\n  version: string;\n}): EthEncryptedData {\n  if (isNullish(publicKey)) {\n    throw new Error('Missing publicKey parameter');\n  } else if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(version)) {\n    throw new Error('Missing version parameter');\n  }\n\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305': {\n      if (typeof data !== 'string') {\n        throw new Error('Message data must be given as a string');\n      }\n      // generate ephemeral keypair\n      const ephemeralKeyPair = nacl.box.keyPair();\n\n      // assemble encryption parameters - from string to UInt8\n      let pubKeyUInt8Array;\n      try {\n        pubKeyUInt8Array = naclUtil.decodeBase64(publicKey);\n      } catch (err) {\n        throw new Error('Bad public key');\n      }\n\n      const msgParamsUInt8Array = naclUtil.decodeUTF8(data);\n      const nonce = nacl.randomBytes(nacl.box.nonceLength);\n\n      // encrypt\n      const encryptedMessage = nacl.box(\n        msgParamsUInt8Array,\n        nonce,\n        pubKeyUInt8Array,\n        ephemeralKeyPair.secretKey,\n      );\n\n      // handle encrypted data\n      const output = {\n        version: 'x25519-xsalsa20-poly1305',\n        nonce: naclUtil.encodeBase64(nonce),\n        ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n        ciphertext: naclUtil.encodeBase64(encryptedMessage),\n      };\n      // return encrypted msg data\n      return output;\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported');\n  }\n}\n\n/**\n * Encrypt a message in a way that obscures the message length.\n *\n * The message is padded to a multiple of 2048 before being encrypted so that the length of the\n * resulting encrypted message can't be used to guess the exact length of the original message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nexport function encryptSafely({\n  publicKey,\n  data,\n  version,\n}: {\n  publicKey: string;\n  data: unknown;\n  version: string;\n}): EthEncryptedData {\n  if (isNullish(publicKey)) {\n    throw new Error('Missing publicKey parameter');\n  } else if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(version)) {\n    throw new Error('Missing version parameter');\n  }\n\n  const DEFAULT_PADDING_LENGTH = 2 ** 11;\n  const NACL_EXTRA_BYTES = 16;\n\n  if (typeof data === 'object' && 'toJSON' in data) {\n    // remove toJSON attack vector\n    // TODO, check all possible children\n    throw new Error(\n      'Cannot encrypt with toJSON property.  Please remove toJSON property',\n    );\n  }\n\n  // add padding\n  const dataWithPadding = {\n    data,\n    padding: '',\n  };\n\n  // calculate padding\n  const dataLength = Buffer.byteLength(\n    JSON.stringify(dataWithPadding),\n    'utf-8',\n  );\n  const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n  let padLength = 0;\n  // Only pad if necessary\n  if (modVal > 0) {\n    padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n  }\n  dataWithPadding.padding = '0'.repeat(padLength);\n\n  const paddedMessage = JSON.stringify(dataWithPadding);\n  return encrypt({ publicKey, data: paddedMessage, version });\n}\n\n/**\n * Decrypt a message.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nexport function decrypt({\n  encryptedData,\n  privateKey,\n}: {\n  encryptedData: EthEncryptedData;\n  privateKey: string;\n}): string {\n  if (isNullish(encryptedData)) {\n    throw new Error('Missing encryptedData parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing privateKey parameter');\n  }\n\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305': {\n      // string to buffer to UInt8Array\n      const recieverPrivateKeyUint8Array = nacl_decodeHex(privateKey);\n      const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(\n        recieverPrivateKeyUint8Array,\n      ).secretKey;\n\n      // assemble decryption parameters\n      const nonce = naclUtil.decodeBase64(encryptedData.nonce);\n      const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n      const ephemPublicKey = naclUtil.decodeBase64(\n        encryptedData.ephemPublicKey,\n      );\n\n      // decrypt\n      const decryptedMessage = nacl.box.open(\n        ciphertext,\n        nonce,\n        ephemPublicKey,\n        recieverEncryptionPrivateKey,\n      );\n\n      // return decrypted msg data\n      let output;\n      try {\n        output = naclUtil.encodeUTF8(decryptedMessage);\n      } catch (err) {\n        throw new Error('Decryption failed.');\n      }\n\n      if (output) {\n        return output;\n      }\n      throw new Error('Decryption failed.');\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported.');\n  }\n}\n\n/**\n * Decrypt a message that has been encrypted using `encryptSafely`.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nexport function decryptSafely({\n  encryptedData,\n  privateKey,\n}: {\n  encryptedData: EthEncryptedData;\n  privateKey: string;\n}): string {\n  if (isNullish(encryptedData)) {\n    throw new Error('Missing encryptedData parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing privateKey parameter');\n  }\n\n  const dataWithPadding = JSON.parse(decrypt({ encryptedData, privateKey }));\n  return dataWithPadding.data;\n}\n\n/**\n * Get the encryption public key for the given key.\n *\n * @param privateKey - The private key to generate the encryption public key with.\n * @returns The encryption public key.\n */\nexport function getEncryptionPublicKey(privateKey: string): string {\n  const privateKeyUint8Array = nacl_decodeHex(privateKey);\n  const encryptionPublicKey =\n    nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n  return naclUtil.encodeBase64(encryptionPublicKey);\n}\n\n/**\n * Convert a hex string to the UInt8Array format used by nacl.\n *\n * @param msgHex - The string to convert.\n * @returns The converted string.\n */\nfunction nacl_decodeHex(msgHex: string): Uint8Array {\n  const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return naclUtil.decodeBase64(msgBase64);\n}\n","export * from './personal-sign';\nexport * from './sign-typed-data';\nexport * from './encryption';\nexport { concatSig, normalize } from './utils';\n","import {\n  bufferToHex,\n  ecsign,\n  hashPersonalMessage,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * Create an Ethereum-specific signature for a message.\n *\n * This function is equivalent to the `eth_sign` Ethereum JSON-RPC method as specified in EIP-1417,\n * as well as the MetaMask's `personal_sign` method.\n *\n * @param options - The personal sign options.\n * @param options.privateKey - The key to sign with.\n * @param options.data - The hex data to sign.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function personalSign({\n  privateKey,\n  data,\n}: {\n  privateKey: Buffer;\n  data: unknown;\n}): string {\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing privateKey parameter');\n  }\n\n  const message = legacyToBuffer(data);\n  const msgHash = hashPersonalMessage(message);\n  const sig = ecsign(msgHash, privateKey);\n  const serialized = concatSig(toBuffer(sig.v), sig.r, sig.s);\n  return serialized;\n}\n\n/**\n * Recover the address of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The signature recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded address of the message signer.\n */\nexport function recoverPersonalSignature({\n  data,\n  signature,\n}: {\n  data: unknown;\n  signature: string;\n}): string {\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const publicKey = getPublicKeyFor(data, signature);\n  const sender = publicToAddress(publicKey);\n  const senderHex = bufferToHex(sender);\n  return senderHex;\n}\n\n/**\n * Recover the public key of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The public key recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded public key of the message signer.\n */\nexport function extractPublicKey({\n  data,\n  signature,\n}: {\n  data: unknown;\n  signature: string;\n}): string {\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const publicKey = getPublicKeyFor(data, signature);\n  return `0x${publicKey.toString('hex')}`;\n}\n\n/**\n * Get the public key for the given signature and message.\n *\n * @param message - The message that was signed.\n * @param signature - The '0x'-prefixed hex encoded message signature.\n * @returns The public key of the signer.\n */\nfunction getPublicKeyFor(message: unknown, signature: string): Buffer {\n  const messageHash = hashPersonalMessage(legacyToBuffer(message));\n  return recoverPublicKey(messageHash, signature);\n}\n","import {\n  bufferToHex,\n  ecsign,\n  keccak,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport { rawEncode, soliditySHA3 } from 'ethereumjs-abi';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : keccak(encodeData(type, value, types, version)),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      keccak(\n        rawEncode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return keccak(encodeData(primaryType, data, types, version));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  return keccak(encodeType(primaryType, types));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return keccak(Buffer.concat(parts));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      soliditySHA3(types, data),\n    ],\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n","import {\n  addHexPrefix,\n  bufferToHex,\n  bufferToInt,\n  ecrecover,\n  fromRpcSig,\n  fromSigned,\n  toBuffer,\n  toUnsigned,\n} from 'ethereumjs-util';\nimport { intToHex, isHexString, stripHexPrefix } from 'ethjs-util';\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\n      `Expected an unprefixed hex string. Received: ${hexString}`,\n    );\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\n      `Expected a non-negative integer target length. Received: ${targetLength}`,\n    );\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\n\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nexport function isNullish(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nexport function legacyToBuffer(value: unknown) {\n  return typeof value === 'string' && !isHexString(value)\n    ? Buffer.from(value)\n    : toBuffer(value);\n}\n\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nexport function recoverPublicKey(\n  messageHash: Buffer,\n  signature: string,\n): Buffer {\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nexport function normalize(input: number | string): string {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    const buffer = toBuffer(input);\n    input = bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n\n  return addHexPrefix(input.toLowerCase());\n}\n",null,null,null,null,null,null,null,null,null,null,"import type { AccessListEIP2930TxData, FeeMarketEIP1559TxData, TxData } from \"@ethereumjs/tx\";\nimport { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nexport interface ExtendedAccessListEIP2930TxData extends AccessListEIP2930TxData {\n  from: string;\n}\n\nexport interface ExtendedFeeMarketEIP1559Transaction extends FeeMarketEIP1559TxData {\n  from: string;\n}\n\nexport interface ExtendedTxData extends TxData {\n  from: string;\n}\n\nexport type TransactionParams = ExtendedFeeMarketEIP1559Transaction & ExtendedAccessListEIP2930TxData & ExtendedTxData;\n\nexport interface MessageParams<T> {\n  from: string;\n  data: T;\n}\n\nexport interface TypedMessageParams<T> {\n  from: string;\n  version: string;\n  data: T;\n}\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport interface WalletMiddlewareOptions {\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  processDecryptMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => string;\n  processEncryptionPublicKey?: (address: string, req: JRPCRequest<unknown>) => Promise<string>;\n  processEthSignMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processPersonalMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processSignTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processTypedMessage?: (msgParams: MessageParams<TypedDataV1>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV3?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV4?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createWalletMiddleware, WalletMiddlewareOptions } from \"./walletMidddleware\";\n\nexport type IProviderHandlers = WalletMiddlewareOptions;\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport interface AddEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addChain: (params: AddEthereumChainParameter) => Promise<void>;\n  switchChain: (params: { chainId: string }) => Promise<void>;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport interface IAccountHandlers {\n  updatePrivatekey: (params: { privateKey: string }) => Promise<void>;\n}\n\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{ chainId: chainConfig.chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { isValidAddress } from \"ethereumjs-util\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/walletMidddleware\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { privateToAddress, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BigNumber) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BigNumber {\n  if (BigNumber.isBigNumber(inputHex)) return inputHex;\n  return new BigNumber(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BigNumber, numerator: number | BigNumber, denominator: number | BigNumber): BigNumber {\n  const numberBN = new BigNumber(numerator);\n  const denomBN = new BigNumber(denominator);\n  return targetBN.multipliedBy(numberBN).dividedBy(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import Common, { Hardfork } from \"@ethereumjs/common\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { TransactionParams } from \"../../../rpc/walletMidddleware\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.multipliedBy(0.9).dp(0, 1);\n    const bufferedGasLimitBn = initialGasLimitBn.multipliedBy(multiplier).dp(0, 1);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport {\n  AddEthereumChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createEthMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n","'use strict';\n\nvar helpers = require('./helpers');\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'additionalItems': true,\n  'then': true,\n  'else': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true,\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      if(!v) return;\n      var id = v.$id || v.id;\n      return id ? ('<' + id + '>') : (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  var throwAll = options.throwAll;\n  options.throwError = false;\n  options.throwAll = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n  options.throwAll = throwAll;\n\n  if (!res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n    ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      var id = v.$id || v.id;\n      if(id) return '<' + id + '>';\n      return(v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var id = v.$id || v.id;\n      var msg = id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n    ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    var id = v.$id || v.id;\n    return id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.if = function validateIf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) return null;\n  if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n  var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var res;\n  if(ifValid){\n    if (schema.then === undefined) return;\n    if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n    result.importErrors(res);\n  }else{\n    if (schema.else === undefined) return;\n    if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n    result.importErrors(res);\n  }\n  return result;\n};\n\nfunction getEnumerableProperty(object, key){\n  // Determine if `key` shows up in `for(var key in object)`\n  // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n  if(Object.hasOwnProperty.call(object, key)) return object[key];\n  // Test `key in object` as an optimization; false means it won't\n  if(!(key in object)) return;\n  while( (object = Object.getPrototypeOf(object)) ){\n    if(Object.propertyIsEnumerable.call(object, key)) return object[key];\n  }\n}\n\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.propertyNames = function validatePropertyNames (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var subschema = schema.propertyNames!==undefined ? schema.propertyNames : {};\n  if(!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n\n  for (var property in instance) {\n    if(getEnumerableProperty(instance, property) !== undefined){\n      var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n      result.importErrors(res);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    var subschema = properties[property];\n    if(subschema===undefined){\n      continue;\n    }else if(subschema===null){\n      throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n    }\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, subschema, options, ctx);\n    }\n    var prop = getEnumerableProperty(instance, property);\n    var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"is not allowed to have the additional property \" + JSON.stringify(property),\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var subschema = patternProperties[pattern];\n      if(subschema===undefined){\n        continue;\n      }else if(subschema===null){\n        throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n      }\n      try {\n        var regexp = new RegExp(pattern, 'u');\n      } catch(_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n      }\n      if (!regexp.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, subschema, options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.items===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    if(Array.isArray(schema.items)){\n      var items =  schema.items[i]===undefined ? schema.additionalItems : schema.items[i];\n    }else{\n      var items = schema.items;\n    }\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.contains = function validateContains (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.contains===undefined) return;\n  if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var count = instance.some(function (value, i) {\n    var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n    return res.errors.length===0;\n  });\n  if(count===false){\n    result.addError({\n      name: 'contains',\n      argument: schema.contains,\n      message: \"must contain an item matching given schema\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    if(!(instance > schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than \" + schema.minimum,\n      });\n    }\n  } else {\n    if(!(instance >= schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than or equal to \" + schema.minimum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    if(!(instance < schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than \" + schema.maximum,\n      });\n    }\n  } else {\n    if(!(instance <= schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than or equal to \" + schema.maximum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMinimum = function validateExclusiveMinimum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n  if(typeof schema.exclusiveMinimum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance > schema.exclusiveMinimum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMinimum',\n      argument: schema.exclusiveMinimum,\n      message: \"must be strictly greater than \" + schema.exclusiveMinimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMaximum = function validateExclusiveMaximum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n  if(typeof schema.exclusiveMaximum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance < schema.exclusiveMaximum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMaximum',\n      argument: schema.exclusiveMaximum,\n      message: \"must be strictly less than \" + schema.exclusiveMaximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument),\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\",\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(getEnumerableProperty(instance, n)===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var pattern = schema.pattern;\n  try {\n    var regexp = new RegExp(pattern, 'u');\n  } catch(_e) {\n    // In the event the stricter handling causes an error, fall back on the forgiving handling\n    // DEPRECATED\n    regexp = new RegExp(pattern);\n  }\n  if (!instance.match(regexp)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString()),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (schema.uniqueItems!==true) return;\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var id = type && (type.$id || type.id);\n      var schemaId = id || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n","'use strict';\n\nvar uri = require('url');\n\nvar ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, path, name, argument) {\n  if(Array.isArray(path)){\n    this.path = path;\n    this.property = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else if(path !== undefined){\n    this.property = path;\n  }\n  if (message) {\n    this.message = message;\n  }\n  if (schema) {\n    var id = schema.$id || schema.id;\n    this.schema = id || schema;\n  }\n  if (instance !== undefined) {\n    this.instance = instance;\n  }\n  this.name = name;\n  this.argument = argument;\n  this.stack = this.toString();\n};\n\nValidationError.prototype.toString = function toString() {\n  return this.property + ' ' + this.message;\n};\n\nvar ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {\n  this.instance = instance;\n  this.schema = schema;\n  this.options = options;\n  this.path = ctx.path;\n  this.propertyPath = ctx.propertyPath;\n  this.errors = [];\n  this.throwError = options && options.throwError;\n  this.throwFirst = options && options.throwFirst;\n  this.throwAll = options && options.throwAll;\n  this.disableFormat = options && options.disableFormat === true;\n};\n\nValidatorResult.prototype.addError = function addError(detail) {\n  var err;\n  if (typeof detail == 'string') {\n    err = new ValidationError(detail, this.instance, this.schema, this.path);\n  } else {\n    if (!detail) throw new Error('Missing error detail');\n    if (!detail.message) throw new Error('Missing error message');\n    if (!detail.name) throw new Error('Missing validator type');\n    err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);\n  }\n\n  this.errors.push(err);\n  if (this.throwFirst) {\n    throw new ValidatorResultError(this);\n  }else if(this.throwError){\n    throw err;\n  }\n  return err;\n};\n\nValidatorResult.prototype.importErrors = function importErrors(res) {\n  if (typeof res == 'string' || (res && res.validatorType)) {\n    this.addError(res);\n  } else if (res && res.errors) {\n    this.errors = this.errors.concat(res.errors);\n  }\n};\n\nfunction stringizer (v,i){\n  return i+': '+v.toString()+'\\n';\n}\nValidatorResult.prototype.toString = function toString(res) {\n  return this.errors.map(stringizer).join('');\n};\n\nObject.defineProperty(ValidatorResult.prototype, \"valid\", { get: function() {\n  return !this.errors.length;\n} });\n\nmodule.exports.ValidatorResultError = ValidatorResultError;\nfunction ValidatorResultError(result) {\n  if(Error.captureStackTrace){\n    Error.captureStackTrace(this, ValidatorResultError);\n  }\n  this.instance = result.instance;\n  this.schema = result.schema;\n  this.options = result.options;\n  this.errors = result.errors;\n}\nValidatorResultError.prototype = new Error();\nValidatorResultError.prototype.constructor = ValidatorResultError;\nValidatorResultError.prototype.name = \"Validation Error\";\n\n/**\n * Describes a problem with a Schema which prevents validation of an instance\n * @name SchemaError\n * @constructor\n */\nvar SchemaError = exports.SchemaError = function SchemaError (msg, schema) {\n  this.message = msg;\n  this.schema = schema;\n  Error.call(this, msg);\n  Error.captureStackTrace(this, SchemaError);\n};\nSchemaError.prototype = Object.create(Error.prototype,\n  {\n    constructor: {value: SchemaError, enumerable: false},\n    name: {value: 'SchemaError', enumerable: false},\n  });\n\nvar SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, path, base, schemas) {\n  this.schema = schema;\n  this.options = options;\n  if(Array.isArray(path)){\n    this.path = path;\n    this.propertyPath = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else{\n    this.propertyPath = path;\n  }\n  this.base = base;\n  this.schemas = schemas;\n};\n\nSchemaContext.prototype.resolve = function resolve (target) {\n  return uri.resolve(this.base, target);\n};\n\nSchemaContext.prototype.makeChild = function makeChild(schema, propertyName){\n  var path = (propertyName===undefined) ? this.path : this.path.concat([propertyName]);\n  var id = schema.$id || schema.id;\n  var base = uri.resolve(this.base, id||'');\n  var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));\n  if(id && !ctx.schemas[base]){\n    ctx.schemas[base] = schema;\n  }\n  return ctx;\n};\n\nvar FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {\n  // 7.3.1. Dates, Times, and Duration\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  'date': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n  'duration': /P(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S)|\\d+(D|M(\\d+D)?|Y(\\d+M(\\d+D)?)?)(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S))?|\\d+W)/i,\n\n  // 7.3.2. Email Addresses\n  // TODO: fix the email production\n  'email': /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'idn-email': /^(\"(?:[!#-\\[\\]-\\u{10FFFF}]|\\\\[\\t -\\u{10FFFF}])*\"|[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*)@([!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*|\\[[!-Z\\^-\\u{10FFFF}]*\\])$/u,\n\n  // 7.3.3. Hostnames\n\n  // 7.3.4. IP Addresses\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  // FIXME whitespace is invalid\n  'ipv6': /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n  // 7.3.5. Resource Identifiers\n  // TODO: A more accurate regular expression for \"uri\" goes:\n  // [A-Za-z][+\\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?)?\n  'uri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'uri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/,\n  'iri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'iri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\\u{10FFFF}]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/u,\n  'uuid': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n\n  // 7.3.6. uri-template\n  'uri-template': /(%[0-9a-f]{2}|[!#$&(-;=?@\\[\\]_a-z~]|\\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?)*\\})*/iu,\n\n  // 7.3.7. JSON Pointers\n  'json-pointer': /^(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*$/iu,\n  'relative-json-pointer': /^\\d+(#|(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*)$/iu,\n\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n\n  'utc-millisec': function (input) {\n    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n\n  // 7.3.8. regex\n  'regex': function (input) {\n    var result = true;\n    try {\n      new RegExp(input);\n    } catch (e) {\n      result = false;\n    }\n    return result;\n  },\n\n  // Other definitions\n  // \"style\" was removed from JSON Schema in draft-4 and is deprecated\n  'style': /[\\r\\n\\t ]*[^\\r\\n\\t ][^:]*:[\\r\\n\\t ]*[^\\r\\n\\t ;]*[\\r\\n\\t ]*;?/,\n  // \"color\" was removed from JSON Schema in draft-4 and is deprecated\n  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n  'phone': /^\\+(?:[0-9] ?){6,14}[0-9]$/,\n  'alpha': /^[a-zA-Z]+$/,\n  'alphanumeric': /^[a-zA-Z0-9]+$/,\n};\n\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nexports.isFormat = function isFormat (input, format, validator) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  } else if (validator && validator.customFormats &&\n      typeof validator.customFormats[format] === 'function') {\n    return validator.customFormats[format](input);\n  }\n  return true;\n};\n\nvar makeSuffix = exports.makeSuffix = function makeSuffix (key) {\n  key = key.toString();\n  // This function could be capable of outputting valid a ECMAScript string, but the\n  // resulting code for testing which form to use would be tens of thousands of characters long\n  // That means this will use the name form for some illegal forms\n  if (!key.match(/[.\\s\\[\\]]/) && !key.match(/^[\\d]/)) {\n    return '.' + key;\n  }\n  if (key.match(/^\\d+$/)) {\n    return '[' + key + ']';\n  }\n  return '[' + JSON.stringify(key) + ']';\n};\n\nexports.deepCompareStrict = function deepCompareStrict (a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    return a.every(function (v, i) {\n      return deepCompareStrict(a[i], b[i]);\n    });\n  }\n  if (typeof a === 'object') {\n    if (!a || !b) {\n      return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n    return aKeys.every(function (v) {\n      return deepCompareStrict(a[v], b[v]);\n    });\n  }\n  return a === b;\n};\n\nfunction deepMerger (target, dst, e, i) {\n  if (typeof e === 'object') {\n    dst[i] = deepMerge(target[i], e);\n  } else {\n    if (target.indexOf(e) === -1) {\n      dst.push(e);\n    }\n  }\n}\n\nfunction copyist (src, dst, key) {\n  dst[key] = src[key];\n}\n\nfunction copyistWithDeepMerge (target, src, dst, key) {\n  if (typeof src[key] !== 'object' || !src[key]) {\n    dst[key] = src[key];\n  }\n  else {\n    if (!target[key]) {\n      dst[key] = src[key];\n    } else {\n      dst[key] = deepMerge(target[key], src[key]);\n    }\n  }\n}\n\nfunction deepMerge (target, src) {\n  var array = Array.isArray(src);\n  var dst = array && [] || {};\n\n  if (array) {\n    target = target || [];\n    dst = dst.concat(target);\n    src.forEach(deepMerger.bind(null, target, dst));\n  } else {\n    if (target && typeof target === 'object') {\n      Object.keys(target).forEach(copyist.bind(null, target, dst));\n    }\n    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));\n  }\n\n  return dst;\n}\n\nmodule.exports.deepMerge = deepMerge;\n\n/**\n * Validates instance against the provided schema\n * Implements URI+JSON Pointer encoding, e.g. \"%7e\"=\"~0\"=>\"~\", \"~1\"=\"%2f\"=>\"/\"\n * @param o\n * @param s The path to walk o along\n * @return any\n */\nexports.objectGetPath = function objectGetPath(o, s) {\n  var parts = s.split('/').slice(1);\n  var k;\n  while (typeof (k=parts.shift()) == 'string') {\n    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));\n    if (!(n in o)) return;\n    o = o[n];\n  }\n  return o;\n};\n\nfunction pathEncoder (v) {\n  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');\n}\n/**\n * Accept an Array of property names and return a JSON Pointer URI fragment\n * @param Array a\n * @return {String}\n */\nexports.encodePath = function encodePointer(a){\n  // ~ must be encoded explicitly because hacks\n  // the slash is encoded by encodeURIComponent\n  return a.map(pathEncoder).join('');\n};\n\n\n/**\n * Calculate the number of decimal places a number uses\n * We need this to get correct results out of multipleOf and divisibleBy\n * when either figure is has decimal places, due to IEEE-754 float issues.\n * @param number\n * @returns {number}\n */\nexports.getDecimalPlaces = function getDecimalPlaces(number) {\n\n  var decimalPlaces = 0;\n  if (isNaN(number)) return decimalPlaces;\n\n  if (typeof number !== 'number') {\n    number = Number(number);\n  }\n\n  var parts = number.toString().split('e');\n  if (parts.length === 2) {\n    if (parts[1][0] !== '-') {\n      return decimalPlaces;\n    } else {\n      decimalPlaces = Number(parts[1].slice(1));\n    }\n  }\n\n  var decimalParts = parts[0].split('.');\n  if (decimalParts.length === 2) {\n    decimalPlaces += decimalParts[1].length;\n  }\n\n  return decimalPlaces;\n};\n\nexports.isSchema = function isSchema(val){\n  return (typeof val === 'object' && val) || (typeof val === 'boolean');\n};\n\n","'use strict';\n\nvar Validator = module.exports.Validator = require('./validator');\n\nmodule.exports.ValidatorResult = require('./helpers').ValidatorResult;\nmodule.exports.ValidatorResultError = require('./helpers').ValidatorResultError;\nmodule.exports.ValidationError = require('./helpers').ValidationError;\nmodule.exports.SchemaError = require('./helpers').SchemaError;\nmodule.exports.SchemaScanResult = require('./scan').SchemaScanResult;\nmodule.exports.scan = require('./scan').scan;\n\nmodule.exports.validate = function (instance, schema, options) {\n  var v = new Validator();\n  return v.validate(instance, schema, options);\n};\n","\"use strict\";\n\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+ourBase+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};\n","'use strict';\n\nvar urilib = require('url');\n\nvar attribute = require('./attribute');\nvar helpers = require('./helpers');\nvar scanSchema = require('./scan').scan;\nvar ValidatorResult = helpers.ValidatorResult;\nvar ValidatorResultError = helpers.ValidatorResultError;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext;\n//var anonymousBase = 'vnd.jsonschema:///';\nvar anonymousBase = '/';\n\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */\nvar Validator = function Validator () {\n  // Allow a validator instance to override global custom formats or to have their\n  // own custom formats.\n  this.customFormats = Object.create(Validator.prototype.customFormats);\n  this.schemas = {};\n  this.unresolvedRefs = [];\n\n  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n  this.types = Object.create(types);\n  this.attributes = Object.create(attribute.validators);\n};\n\n// Allow formats to be registered globally.\nValidator.prototype.customFormats = {};\n\n// Hint at the presence of a property\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */\nValidator.prototype.addSchema = function addSchema (schema, base) {\n  var self = this;\n  if (!schema) {\n    return null;\n  }\n  var scan = scanSchema(base||anonymousBase, schema);\n  var ourUri = base || schema.$id || schema.id;\n  for(var uri in scan.id){\n    this.schemas[uri] = scan.id[uri];\n  }\n  for(var uri in scan.ref){\n    // If this schema is already defined, it will be filtered out by the next step\n    this.unresolvedRefs.push(uri);\n  }\n  // Remove newly defined schemas from unresolvedRefs\n  this.unresolvedRefs = this.unresolvedRefs.filter(function(uri){\n    return typeof self.schemas[uri]==='undefined';\n  });\n  return this.schemas[ourUri];\n};\n\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n  if(!Array.isArray(schemas)) return;\n  for(var i=0; i<schemas.length; i++){\n    this.addSubSchema(baseuri, schemas[i]);\n  }\n};\n\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n  if(!schemas || typeof schemas!='object') return;\n  for(var p in schemas){\n    this.addSubSchema(baseuri, schemas[p]);\n  }\n};\n\n\n\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */\nValidator.prototype.setSchemas = function setSchemas (schemas) {\n  this.schemas = schemas;\n};\n\n/**\n * Returns the schema of a certain urn\n * @param urn\n */\nValidator.prototype.getSchema = function getSchema (urn) {\n  return this.schemas[urn];\n};\n\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */\nValidator.prototype.validate = function validate (instance, schema, options, ctx) {\n  if((typeof schema !== 'boolean' && typeof schema !== 'object') || schema === null){\n    throw new SchemaError('Expected `schema` to be an object or boolean');\n  }\n  if (!options) {\n    options = {};\n  }\n  // This section indexes subschemas in the provided schema, so they don't need to be added with Validator#addSchema\n  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n  var id = schema.$id || schema.id;\n  var base = urilib.resolve(options.base||anonymousBase, id||'');\n  if(!ctx){\n    ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));\n    if (!ctx.schemas[base]) {\n      ctx.schemas[base] = schema;\n    }\n    var found = scanSchema(base, schema);\n    for(var n in found.id){\n      var sch = found.id[n];\n      ctx.schemas[n] = sch;\n    }\n  }\n  if(options.required && instance===undefined){\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    result.addError('is required, but is undefined');\n    return result;\n  }\n  var result = this.validateSchema(instance, schema, options, ctx);\n  if (!result) {\n    throw new Error('Result undefined');\n  }else if(options.throwAll && result.errors.length){\n    throw new ValidatorResultError(result);\n  }\n  return result;\n};\n\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/\nfunction shouldResolve(schema) {\n  var ref = (typeof schema === 'string') ? schema : schema.$ref;\n  if (typeof ref=='string') return ref;\n  return false;\n}\n\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */\nValidator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  // Support for the true/false schemas\n  if(typeof schema==='boolean') {\n    if(schema===true){\n      // `true` is always valid\n      schema = {};\n    }else if(schema===false){\n      // `false` is always invalid\n      schema = {type: []};\n    }\n  }else if(!schema){\n    // This might be a string\n    throw new Error(\"schema is undefined\");\n  }\n\n  if (schema['extends']) {\n    if (Array.isArray(schema['extends'])) {\n      var schemaobj = {schema: schema, ctx: ctx};\n      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));\n      schema = schemaobj.schema;\n      schemaobj.schema = null;\n      schemaobj.ctx = null;\n      schemaobj = null;\n    } else {\n      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));\n    }\n  }\n\n  // If passed a string argument, load that schema URI\n  var switchSchema = shouldResolve(schema);\n  if (switchSchema) {\n    var resolved = this.resolve(schema, switchSchema, ctx);\n    var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);\n    return this.validateSchema(instance, resolved.subschema, options, subctx);\n  }\n\n  var skipAttributes = options && options.skipAttributes || [];\n  // Validate each schema attribute against the instance\n  for (var key in schema) {\n    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n      var validatorErr = null;\n      var validator = this.attributes[key];\n      if (validator) {\n        validatorErr = validator.call(this, instance, schema, options, ctx);\n      } else if (options.allowUnknownAttributes === false) {\n        // This represents an error with the schema itself, not an invalid instance\n        throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n      }\n      if (validatorErr) {\n        result.importErrors(validatorErr);\n      }\n    }\n  }\n\n  if (typeof options.rewrite == 'function') {\n    var value = options.rewrite.call(this, instance, schema, options, ctx);\n    result.instance = value;\n  }\n  return result;\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {\n  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.superResolve = function superResolve (schema, ctx) {\n  var ref = shouldResolve(schema);\n  if(ref) {\n    return this.resolve(schema, ref, ctx).subschema;\n  }\n  return schema;\n};\n\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/\nValidator.prototype.resolve = function resolve (schema, switchSchema, ctx) {\n  switchSchema = ctx.resolve(switchSchema);\n  // First see if the schema exists under the provided URI\n  if (ctx.schemas[switchSchema]) {\n    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};\n  }\n  // Else try walking the property pointer\n  var parsed = urilib.parse(switchSchema);\n  var fragment = parsed && parsed.hash;\n  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n  if (!document || !ctx.schemas[document]) {\n    throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n  }\n  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n  if(subschema===undefined){\n    throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n  }\n  return {subschema: subschema, switchSchema: switchSchema};\n};\n\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */\nValidator.prototype.testType = function validateType (instance, schema, options, ctx, type) {\n  if(type===undefined){\n    return;\n  }else if(type===null){\n    throw new SchemaError('Unexpected null in \"type\" keyword');\n  }\n  if (typeof this.types[type] == 'function') {\n    return this.types[type].call(this, instance);\n  }\n  if (type && typeof type == 'object') {\n    var res = this.validateSchema(instance, type, options, ctx);\n    return res === undefined || !(res && res.errors.length);\n  }\n  // Undefined or properties not on the list are acceptable, same as not being defined\n  return true;\n};\n\nvar types = Validator.prototype.types = {};\ntypes.string = function testString (instance) {\n  return typeof instance == 'string';\n};\ntypes.number = function testNumber (instance) {\n  // isFinite returns false for NaN, Infinity, and -Infinity\n  return typeof instance == 'number' && isFinite(instance);\n};\ntypes.integer = function testInteger (instance) {\n  return (typeof instance == 'number') && instance % 1 === 0;\n};\ntypes.boolean = function testBoolean (instance) {\n  return typeof instance == 'boolean';\n};\ntypes.array = function testArray (instance) {\n  return Array.isArray(instance);\n};\ntypes['null'] = function testNull (instance) {\n  return instance === null;\n};\ntypes.date = function testDate (instance) {\n  return instance instanceof Date;\n};\ntypes.any = function testAny (instance) {\n  return true;\n};\ntypes.object = function testObject (instance) {\n  // TODO: fix this - see #15\n  return instance && (typeof instance === 'object') && !(Array.isArray(instance)) && !(instance instanceof Date);\n};\n\nmodule.exports = Validator;\n","// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n(function(root, f) {\n  'use strict';\n  if (typeof module !== 'undefined' && module.exports) module.exports = f();\n  else if (root.nacl) root.nacl.util = f();\n  else {\n    root.nacl = {};\n    root.nacl.util = f();\n  }\n}(this, function() {\n  'use strict';\n\n  var util = {};\n\n  function validateBase64(s) {\n    if (!(/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/.test(s))) {\n      throw new TypeError('invalid encoding');\n    }\n  }\n\n  util.decodeUTF8 = function(s) {\n    if (typeof s !== 'string') throw new TypeError('expected string');\n    var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);\n    for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\n    return b;\n  };\n\n  util.encodeUTF8 = function(arr) {\n    var i, s = [];\n    for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));\n    return decodeURIComponent(escape(s.join('')));\n  };\n\n  if (typeof atob === 'undefined') {\n    // Node.js\n\n    if (typeof Buffer.from !== 'undefined') {\n       // Node v6 and later\n      util.encodeBase64 = function (arr) { // v6 and later\n          return Buffer.from(arr).toString('base64');\n      };\n\n      util.decodeBase64 = function (s) {\n        validateBase64(s);\n        return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));\n      };\n\n    } else {\n      // Node earlier than v6\n      util.encodeBase64 = function (arr) { // v6 and later\n        return (new Buffer(arr)).toString('base64');\n      };\n\n      util.decodeBase64 = function(s) {\n        validateBase64(s);\n        return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));\n      };\n    }\n\n  } else {\n    // Browsers\n\n    util.encodeBase64 = function(arr) {\n      var i, s = [], len = arr.length;\n      for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));\n      return btoa(s.join(''));\n    };\n\n    util.decodeBase64 = function(s) {\n      validateBase64(s);\n      var i, d = atob(s), b = new Uint8Array(d.length);\n      for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\n      return b;\n    };\n\n  }\n\n  return util;\n\n}));\n"],"names":["resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","ethErrors","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","WalletConnectProvider","BaseProvider","constructor","config","state","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","EIP155","skipLookupNetwork","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","getChainConfig","update","displayName","sendCustomRequest","chainName","error","log","configure","lookupNetwork","WalletInitializationError","notReady","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","rpcConnectionError","emit","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","stripHexPrefix","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","get","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","assert","ok","isValidAddress","SignTypedDataVersion","V1","doesNotThrow","JSON","parse","Array","isArray","typedSignatureHash","V3","V4","primaryType","types","validation","jsonschema","validate","TYPED_MESSAGE_SCHEMA","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","debug","finalChainId","info","getEncryptionPublicKey","stripped","buff","decrypted","decrypt","encryptedData","bnLessThan","a","b","lt","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","isBigNumber","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","multipliedBy","dividedBy","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","name","hardfork","Hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","Common","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","ticker","symbol","tickerName","blockExplorer","accountHandlers"],"sourceRoot":""}