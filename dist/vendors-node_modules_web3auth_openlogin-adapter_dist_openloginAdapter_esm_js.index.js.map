{"version":3,"file":"vendors-node_modules_web3auth_openlogin-adapter_dist_openloginAdapter_esm_js.index.js","mappings":"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","sources":["webpack://annotation/./node_modules/@web3auth/openlogin-adapter/src/config.ts","webpack://annotation/./node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","debug","defaultOptions","openloginOptions","sessionTime","currentChainNamespace","defaultChainIdConfig","rpcTarget","OTHER","WalletInitializationError","invalidParams","chainConfigProxy","provider","privKeyProvider","_","Error","init","options","checkInitializationRequirements","isRedirectResult","REDIRECT","redirectResult","getHashQueryParams","Object","keys","length","_pid","replaceUrlOnRedirect","openloginInstance","OpenLogin","status","READY","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","authenticateUser","userInfo","getUserInfo","idToken","setAdapterSettings","setChainConfig","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","ED25519","SECP256K1","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"sourceRoot":""}