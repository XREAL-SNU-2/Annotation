(self["webpackChunkannotation"] = self["webpackChunkannotation"] || []).push([["vendors-node_modules_web3auth_phantom-adapter_dist_phantomAdapter_esm_js"],{

/***/ "./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseSolanaAdapter": function() { return /* binding */ BaseSolanaAdapter; }
/* harmony export */ });
/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3auth/base */ "./node_modules/@web3auth/base/dist/base.esm.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ "./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_1__);



class BaseSolanaAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.BaseAdapter {
  async authenticateUser() {
    var _this$chainConfig;

    if (!this.provider || !((_this$chainConfig = this.chainConfig) !== null && _this$chainConfig !== void 0 && _this$chainConfig.chainId)) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError();
    const {
      chainNamespace,
      chainId
    } = this.chainConfig;
    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    const accounts = await this.provider.request({
      method: "getAccounts"
    });

    if (accounts && accounts.length > 0) {
      const existingToken = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getSavedToken)(accounts[0], this.name);

      if (existingToken) {
        const isExpired = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.checkIfTokenIsExpired)(existingToken);

        if (!isExpired) {
          return {
            idToken: existingToken
          };
        }
      }

      const payload = {
        domain: window.location.origin,
        uri: window.location.href,
        address: accounts[0],
        chainId: parseInt(chainId, 16),
        version: "1",
        nonce: Math.random().toString(36).slice(2),
        issuedAt: new Date().toISOString()
      };
      const challenge = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.signChallenge)(payload, chainNamespace);
      const encodedMessage = new TextEncoder().encode(challenge);
      const signedMessage = await this.provider.request({
        method: "signMessage",
        params: {
          message: encodedMessage,
          display: "utf8"
        }
      });
      const idToken = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.verifySignedChallenge)(chainNamespace, bs58__WEBPACK_IMPORTED_MODULE_1___default().encode(signedMessage), challenge, this.name, this.sessionTime);
      (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.saveToken)(accounts[0], this.name, idToken);
      return {
        idToken
      };
    }

    throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
  }

  async disconnect() {
    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.disconnectionError("Not connected with wallet");
    const accounts = await this.provider.request({
      method: "getAccounts"
    });

    if (accounts && accounts.length > 0) {
      (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.clearToken)(accounts[0], this.name);
    }
  }

}




/***/ }),

/***/ "./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js ***!
  \*************************************************************************************/
/***/ (function(module) {

"use strict";

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
function base (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256)
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i)
    var xc = x.charCodeAt(0)
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i
  }
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)
  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
  function encode (source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source)
    }
    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0
    var length = 0
    var pbegin = 0
    var pend = source.length
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++
      zeroes++
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
    var b58 = new Uint8Array(size)
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin]
            // Apply "b58 = b58 * 256 + ch".
      var i = 0
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0
        b58[it1] = (carry % BASE) >>> 0
        carry = (carry / BASE) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      pbegin++
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length
    while (it2 !== size && b58[it2] === 0) {
      it2++
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes)
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return new Uint8Array() }
    var psz = 0
        // Skip and count leading '1's.
    var zeroes = 0
    var length = 0
    while (source[psz] === LEADER) {
      zeroes++
      psz++
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size)
        // Process the characters.
    while (source[psz]) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]
            // Invalid character
      if (carry === 255) { return }
      var i = 0
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0
        b256[it3] = (carry % 256) >>> 0
        carry = (carry / 256) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      psz++
    }
        // Skip leading zeroes in b256.
    var it4 = size - length
    while (it4 !== size && b256[it4] === 0) {
      it4++
    }
    var vch = new Uint8Array(zeroes + (size - it4))
    var j = zeroes
    while (it4 !== size) {
      vch[j++] = b256[it4++]
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string)
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
module.exports = base


/***/ }),

/***/ "./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const basex = __webpack_require__(/*! base-x */ "./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js")
const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

module.exports = basex(ALPHABET)


/***/ }),

/***/ "./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PhantomAdapter": function() { return /* binding */ PhantomAdapter; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ "./node_modules/@web3auth/base/dist/base.esm.js");
/* harmony import */ var _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base-solana-adapter */ "./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js");
/* harmony import */ var _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/solana-provider */ "./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js");





function poll(callback, interval, count) {
  return new Promise((resolve, reject) => {
    if (count > 0) {
      setTimeout(async () => {
        const done = await callback();
        if (done) resolve(done);
        if (!done) poll(callback, interval, count - 1).then(res => {
          resolve(res);
          return res;
        }).catch(err => reject(err));
      }, interval);
    } else {
      resolve(false);
    }
  });
}
const detectProvider = async function () {
  var _window$solana;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    interval: 1000,
    count: 3
  };
  const isPhantomAvailable = typeof window !== "undefined" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);

  if (isPhantomAvailable) {
    return window.solana;
  }

  const isAvailable = await poll(() => {
    var _window$solana2;

    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;
  }, options.interval, options.count);
  if (isAvailable) return window.solana;
  return null;
};

class PhantomAdapter extends _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_2__.BaseSolanaAdapter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "name", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapterNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_NAMESPACES.SOLANA);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "currentChainNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_CATEGORY.EXTERNAL);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "status", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_wallet", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "phantomProvider", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "rehydrated", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_onDisconnect", () => {
      if (this._wallet) {
        this._wallet.off("disconnect", this._onDisconnect);

        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up

        this.status = this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED ? _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY : _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);
      }
    });

    this.chainConfig = options.chainConfig || null;
    this.sessionTime = options.sessionTime || 86400;
  }

  get isWalletConnected() {
    var _this$_wallet;

    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED);
  }

  get provider() {
    var _this$phantomProvider;

    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  setAdapterSettings(options) {
    if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY) return;

    if (options !== null && options !== void 0 && options.sessionTime) {
      this.sessionTime = options.sessionTime;
    }
  }

  async init(options) {
    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set

    if (!this.chainConfig) {
      this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA, "0x1");
    }

    this._wallet = await detectProvider({
      interval: 500,
      count: 3
    });
    if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();
    this.phantomProvider = new _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_3__.PhantomInjectedProvider({
      config: {
        chainConfig: this.chainConfig
      }
    });
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);

    try {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("initializing phantom adapter");

      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error("Failed to connect with cached phantom provider", error);
      this.emit("ERRORED", error);
    }
  }

  async connect() {
    var _this = this;

    try {
      super.checkConnectionRequirements();
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTING;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTING, {
        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM
      });
      if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();

      if (!this._wallet.isConnected) {
        const handleDisconnect = this._wallet._handleDisconnect;

        try {
          await new Promise((resolve, reject) => {
            const connect = async () => {
              await this.connectWithProvider(this._wallet);
              resolve(this.provider);
            };

            if (!this._wallet) return reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled());

            this._wallet.once("connect", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired


            this._wallet._handleDisconnect = function () {
              reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.windowClosed());

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return handleDisconnect.apply(_this._wallet, args);
            };

            this._wallet.connect().catch(reason => {
              reject(reason);
            });
          });
        } catch (error) {
          if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.Web3AuthError) throw error;
          throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);
        } finally {
          this._wallet._handleDisconnect = handleDisconnect;
        }
      } else {
        await this.connectWithProvider(this._wallet);
      }

      if (!this._wallet.publicKey) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError();

      this._wallet.on("disconnect", this._onDisconnect);

      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, error);
      throw error;
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    await super.disconnect();

    try {
      var _this$_wallet2;

      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());

      if (options.cleanup) {
        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;
        this.phantomProvider = null;
        this._wallet = null;
      }

      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);
    } catch (error) {
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));
    }
  }

  async getUserInfo() {
    if (!this.isWalletConnected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }

  async connectWithProvider(injectedProvider) {
    if (!this.phantomProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError("No phantom provider");
    await this.phantomProvider.setupProvider(injectedProvider);
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTED, {
      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM,
      reconnected: this.rehydrated
    });
    return this.provider;
  }

}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_web3auth_phantom-adapter_dist_phantomAdapter_esm_js.index.js.map